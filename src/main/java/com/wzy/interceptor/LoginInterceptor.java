package com.wzy.interceptor;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.web.servlet.HandlerInterceptor;
import org.springframework.web.servlet.ModelAndView;


/*
使用场景

1、日志记录：记录请求信息的日志，以便进行信息监控、信息统计、计算PV（Page View）等。
2、权限检查：如登录检测，进入处理器检测检测是否登录，如果没有直接返回到登录页面；
3、性能监控：有时候系统在某段时间莫名其妙的慢，可以通过拦截器在进入处理器之前记录开始时间，在处理完后记录结束时间，从而得到该请求的处理时间（如果有反向代理，
                           如apache可以自动记录）；
4、通用行为：读取cookie得到用户信息并将用户对象放入请求，从而方便后续流程使用，还有如提取Locale、Theme信息等，只要是多个处理器都需要的即可使用拦截器实　　　　　　现。
5、OpenSessionInView：如Hibernate，在进入处理器打开Session，在完成后关闭Session。

   本质也是AOP（面向切面编程），也就是说符合横切关注点的所有功能都可以放入拦截器实现。

*/


public class LoginInterceptor implements HandlerInterceptor {

	
	/*
	整个请求处理完毕回调方法，即在视图渲染完毕时回调，如性能监控中我们可以在此记录结束时间并输出消耗时间，还可以进行一些资源清理，
	类似于try-catch-finally中的finally，但仅调用处理器执行链中preHandle返回true的拦截器的afterCompletion。
	*/
	
	public void afterCompletion(HttpServletRequest arg0, HttpServletResponse arg1, Object arg2, Exception arg3)
			throws Exception {

		
	}
	
	
	/*	
	后处理回调方法，实现处理器的后处理（但在渲染视图之前），
	此时我们可以通过modelAndView（模型和视图对象）对模型数据进行处理或对视图进行处理，
	modelAndView也可能为null。	
	*/
	public void postHandle(HttpServletRequest arg0, HttpServletResponse arg1, Object arg2, ModelAndView arg3)
			throws Exception {

	}

	
	/*	
	预处理回调方法，实现处理器的预处理
	true表示继续流程（如调用下一个拦截器或处理器）
	false表示流程中断.需要通过response来产生响应
	*/
	public boolean preHandle(HttpServletRequest arg0, HttpServletResponse arg1, Object arg2) throws Exception {

		
		return true;
	}
	
	
	  

}
